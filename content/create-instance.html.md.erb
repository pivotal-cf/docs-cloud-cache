---
title: Create or Delete a Service Instance
---

## <a id="create-SI"></a> Create a Service Instance

Run `cf create-service p-cloudcache PLAN-NAME SERVICE-INSTANCE-NAME` to create a service instance. Replace `PLAN-NAME` with the name from the list of available plans. Replace `SERVICE-INSTANCE-NAME` with a name of your choice. Use this name to refer to your service instance with other commands. Service instance names can include alpha-numeric characters, hyphens, and underscores.

<pre class='terminal'>
$ cf create-service p-cloudcache extra-large my-cloudcache
</pre>

Service instances are created asynchronously. Run the `cf services` command to view the current status of the service creation, and of other service instances in the current org and space:

<pre class='terminal'>
$ cf services
Getting services in org my-org / space my-space as user...
OK

name            service        plan    bound apps   last operation
my-cloudcache   p-cloudcache   small                create in progress
</pre>

When completed, the status changes from `create in progress` to `create succeeded`.

### <a id="params"></a> Provide Optional Parameters

You can create a customized service instance by passing optional parameters to `cf create-service` using the `-c` flag. The `-c` flag accepts a valid JSON object containing service-specific configuration parameters, provided either in-line or in a file.

The <%=vars.product_full%> service broker supports the following parameters:

- `tls`: A boolean, that when true, enables TLS for all communication within the cluster.
- `services_gateway`: A boolean, that when true, causes the creation of a
service gateway. The service instance must also use TLS for communication
within the cluster.
- `num_servers`: An integer that specifies the number of server instances in the cluster. The minimum value is `4`. The maximum and default values are configured by the operator.
- `new_size_percentage`: An integer that specifies the percentage of the heap to allocate to young generation. This value must be between `5` and `83`. By default, the new size is 2&nbsp;GB or 10% of heap, whichever is smaller.
- `distributed_system_id`: An integer that provides a unique identifier for a cluster that participates in a WAN.
- `shared_write_access`: A boolean, that when true, allows an app within a different space write access to the service instance when service-instance sharing is enabled.

This example enables TLS within the cluster:

<pre class='terminal'>
$ cf create-service p-cloudcache small TLS-cluster -c '{"tls": true}'
</pre>

This example creates a service gateway that is connected to the cluster:

<pre class='terminal'>
$ cf create-service p-cloudcache small TLS-cluster -c '{"tls": true, “services_gateway”: true}'
</pre>

This example creates the service with five service instances in the cluster:

<pre class='terminal'>
$ cf create-service p-cloudcache small my-cloudcache -c '{"num_servers": 5}'
</pre>

This example assigns the service a specific distributed system ID, which is important when restoring a WAN participant from backups:

<pre class='terminal'>
$ cf create-service p-cloudcache small my-cloudcache -c '{"distributed_system_id": 2}'
</pre>

This example creates a cluster that allows write access by an app in
a different space when service-instance sharing is enabled.

<pre class='terminal'>
$ cf create-service p-cloudcache small my-cloudcache -c '{"shared_write_access":true}'
</pre>

### <a id="ssc"></a> Enable Session State Caching with the Java Buildpack
By default, the Tomcat instance is configured to store all Sessions and their data in memory. Under
certain circumstances it may be appropriate to persist the Sessions and their data to a repository.
When this is the case (small amounts of data that should survive the failure of any individual instance),
the buildpack can automatically configure Tomcat to do so by binding an appropriate service, in this
case <%=vars.product_short%>.

When the `session-replication` tag is specified the sessions are configured to be stored in a service instance,
thus moving the data out of Tomcat. An application bound to this service will start running in a Tomcat
instance connected to the service. A region for storing sessions will be created and called
`gemfire_modules_sessions`, and the expiration for sessions is automatically configured to 30 minutes.
This feature is available in Java buildpack version 3.19 and higher, up to but not including version 4.
It is then available again in version 4.3.

To enable session state caching, do _one_ of the following items:

- Option 1: When creating your service instance name, specify the `session-replication` tag. For example:

    <pre class='terminal'>
     $ cf create-service p-cloudcache small-plan my-service-instance -t session-replication</pre>

- Option 2: Update your service instance, specifying the `session-replication` tag:

    <pre class='terminal'>
    $ cf update-service new-service-instance -t session-replication</pre>

- Option 3: When creating the service, append the service instance name with the string `-session-replication`,
for example `my-service-instance-session-replication`.

- If you need to use a different version of <%=vars.product_full%> than is provided by the Java buildpack,
  see [Creating a Custom Buildpack for Session State Caching Apps](session-caching.html#custom-ssc-buildpack) for more information.

### <a id="ssc-spring-session"></a> Enable Session State Caching Using Spring Session

To use
[Spring Session](http://projects.spring.io/spring-session/)
for session state caching for apps with <%=vars.product_short%>, follow the steps below:

1. Make the following changes to the app:
  * Replace existing Spring Session `@EnableXXXHttpSession` annotation with `@EnableGemFireHttpSession(maxInactiveIntervalInSeconds = N)` where `N` is seconds.
  * Add the `spring-session-data-geode` and `spring-data-geode` dependencies to the build.
  * Add beans to the Spring app config.

    For more information, see the [spring-session-data-gemfire-example](https://github.com/jxblum/spring-session-data-gemfire-example) repository.

2. Create a region named `ClusteredSpringSessions` in gfsh when connected
with a security role that can manage cluster data:
  ```
  create region --name=ClusteredSpringSessions --type=PARTITION_HEAP_LRU
  ```

### <a id="service-instance-dev-plan"></a> Single-VM Plans

The Colocated Single-VM Plan is a type of service plan
that is useful for development and testing.
This example creates a Colocated Single-VM Plan service instance:

<pre class='terminal'>
$ cf create-service p-cloudcache dev-plan my-dev-cloudcache
</pre>

The plan provides a single locator and a single server colocated
within a single VM.
Because the VM is recycled when the service instance is updated or upgraded,
all data within the region is lost upon update or upgrade.

When post-deploy scripts are enabled for <%=vars.ops_manager%>,
the service instance is created with a single sample region
called `example_partition_region`.
The region is of type `PARTITION_REDUNDANT_HEAP_LRU`,
as described in [Partitioned Region Types for Creating Regions on the Server](region-design.html#partitioned-types).

If `example_partition_region` has **not** been created,
it is probably because post-deploy scripts are not enabled for <%=vars.ops_manager%>,
as described in [Configure a Co-located Single VM Plan](./install-configure.html#dev-plan).

## <a id="delete-SI"></a> Delete a Service Instance

You can delete service instances using the cf CLI. Before doing so, you must remove any existing service keys and app bindings.

1. Run `cf delete-service-key SERVICE-INSTANCE-NAME KEY-NAME` to delete the service key.
1. Run `cf unbind-service APP-NAME SERVICE-INSTANCE-NAME` to unbind your app from the service instance.
1. Run `cf delete-service SERVICE-INSTANCE-NAME` to delete the service instance.

<pre class='terminal'>
$ cf delete-service-key my-cloudcache my-service-key
$ cf unbind-service my-app my-cloudcache
$ cf delete-service my-cloudcache
</pre>

Deletions are asynchronous. Run `cf services` to view the current status of the service instance deletion.

